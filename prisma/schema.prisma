generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(100)
  avatar    String?    @db.Text
  schedules Schedule[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("teachers")
  @@index([name])
}

model Room {
  id        String     @id @default(uuid())
  number    String     @unique @db.VarChar(20)
  building  String?    @db.VarChar(100)
  capacity  Int?       @db.SmallInt
  schedules Schedule[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("rooms")
  @@index([number])
}

model Subject {
  id           String     @id @default(uuid())
  code         String     @unique @db.VarChar(20)
  name         String     @db.VarChar(100)
  description  String?    @db.Text
  creditHours  Int?       @db.SmallInt
  schedules    Schedule[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("subjects")
  @@index([code])
}

enum TimeSlotEnum {
  FIRST_PERIOD
  SECOND_PERIOD
  THIRD_PERIOD
}

model TimeSlot {
  id        String       @id @default(uuid())
  startTime String       @db.VarChar(5)
  endTime   String       @db.VarChar(5)
  period    TimeSlotEnum @default(FIRST_PERIOD)
  schedules Schedule[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([startTime, endTime])
  @@map("time_slots")
  @@index([period])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Schedule {
  id          String      @id @default(uuid())
  teacher     Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String
  room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String
  timeSlot    TimeSlot    @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  timeSlotId  String
  day         Day
  subject     Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  semester    String?     @db.VarChar(20)
  year        String?     @db.VarChar(10)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([roomId, timeSlotId, day])
  @@unique([teacherId, timeSlotId, day])

  @@index([day, timeSlotId])
  @@index([teacherId, day])
  @@index([roomId, day])
  
  @@map("schedules")
}
